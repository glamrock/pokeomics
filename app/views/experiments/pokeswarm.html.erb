<% content_for :title do %>Pokéswarm<% end %>

<script type="text/javascript">

  var settings = <%= raw @settings.to_json %>

  var data = <%= raw @data.to_json %>

  var owFrames = {};

  var hoverSprite = null;

  function sum(arr) {
    var sum = 0;
    
    for (var i in arr) {
      sum += arr[i];
    }

    return sum;
  }

  function mean(arr) {
    return sum(arr)/arr.length;
  }

  var meanSpeed = mean(data['baseSpeeds']);
  var meanWeight = mean(data['weights']);
  var meanHeight = mean(data['heights']);

  var sparkleFrames = {};

  var PokeSprite = function(id) {
    var me = {};

    me.id = id;
    me.form = id; // Change this if multiform Pokemon
    me.x = 0;
    me.y = 0;

    me.orientation = 'right';
    me.frameState = 0;

    me.loading = false;

    me.baseSpeed = data['baseSpeeds'][me.id-1];
    me.baseHeight = data['heights'][me.id-1];
    me.baseWeight = data['weights'][me.id-1];

    me.sizeMult = 1;

    me.shiny = settings['allShiny'] || (Math.floor(Math.random * 8192) == 1);

    me.sizeClass = 'small';

    //me.flies = (data['fliers'][me.id-1]);

    if (settings['sizeHeightBias']) {
      me.sizeMult *= me.baseHeight/meanHeight;
    }

    me.speed = 5; // Default value

    var speedBiases = [];

    // Make Pokémon with higher Speed stats move faster!
    if (settings['speedStatBias']) {
      speedBiases.push(me.speed * me.baseSpeed/meanSpeed);
    }

    // Make heavier Pokémon slower!
    if (settings['speedWeightBias']) {
      speedBiases.push(me.speed * meanWeight/me.baseWeight);
    }

    if (speedBiases.length > 0) {
      // Take the mean of the speedBiases instead of applying sequentially.
      // Otherwise we end up with crazy extreme values!
      me.speed = mean(speedBiases);
    }

    me.framesPerBobble = 5;

    var bobbleBiases = [];

    if (settings['bobbleStatBias']) {
      bobbleBiases.push(me.framesPerBobble * meanSpeed/me.baseSpeed);
    }

    if (settings['bobbleWeightBias']) {
      bobbleBiases.push(me.framesPerBobble * me.baseWeight/meanWeight);
    }

    if (bobbleBiases.length > 0) {
      me.framesPerBobble = Math.round(mean(bobbleBiases));
    }


    var imgsToLoad = 0;

    function checkLoaded() {
      if (imgsToLoad <= 0) {
        me.loading = false;
        if (me.onLoad) me.onLoad();
      }
    }

    // Start fetching the overworld frames for this species!
    function load() {
      var paths = [];

      ['up', 'down', 'left', 'right'].forEach(function(orientation) {
        [0, 1].forEach(function(frameState) {
          var path = getFramePathCustom(orientation, frameState, me.form);

          var img = new Image();

          imgsToLoad += 1;
          me.loading = true;

          img.onload = function() {
            owFrames[path] = img;
            imgsToLoad -= 1;
            checkLoaded();

            if (img.width > 46) {
              me.sizeClass = 'large';
            }

          }

          img.src = path;
        })
      });

      checkLoaded();
    } 

    function getFramePathCustom(orientation, frameState, form) {
      return "/images/overworld/" + (me.shiny ? 'shiny/' : '') + orientation + "/" + (frameState == 0 ? '' : 'frame2/') + form + ".png"
    }

    function getFramePath() {
      return getFramePathCustom(me.orientation, me.frameState, me.form);
    }

    function getFrame() {
      return owFrames[getFramePath()];
    }

    // ~bobble~
    function bobble()  {
      me.frameState = (me.frameState == 0 ? 1 : 0);
    }

    function dimension(which) {
      return Math.max(Math.min(Math.min(canvas.width, canvas.height), getFrame()[which]*me.sizeMult), 2);
    }

    function width() {
      return dimension('width');
    }

    function height() {
      return dimension('height');
    }

    me.bounceInc = Math.round(Math.random()*1) == 0 ? -1 : 1;
    me.bounceCount = 0;

    function bounce() {
      if (me.bounceCount % 10 == 0) {
        me.bounceInc *= -1;
      }

      me.y += me.bounceInc*3;

      if (me.y + height() > canvas.height) {
        me.bounceInc = -1;
      }

      if (me.y - height() < 0) {
        me.bounceInc = 1;
      }

      me.bounceCount += 1;
    }

    function spin() {

      bounce();

      switch (me.orientation) {
        case 'down':
          me.orientation = 'left';
          break;
        case 'left':
          me.orientation = 'up';
          break;
        case 'up':
          me.orientation = 'right';
          break;
        case 'right':
          me.orientation = 'down';
          break;
      }
    }

    me.sparkleState = 1;

    // ~sparkly!~
    function sparkle() {
      me.sparkleState++;

      if (me.sparkleState > 3) {
        me.sparkleState = 1;
      }
    }

    me.framesPerSparkle = 2;

    function update() {
      if (me.framesPerBobble == 0 || frameCount % me.framesPerBobble == 0) {
        bobble(); 
      }

      if (me.shiny && frameCount % me.framesPerSparkle == 0) {
        sparkle();
      }

      if (hoverSprite != me) {
        if (me.spinning || me.orientation != 'right') {
          spin();
        }

        me.x += me.speed;
      }
    }

    function hover() {
      if (!me.spinning) {
        hoverSprite = me;

        me.orientation = 'down';
      }
    }

    function unHover() {
      if (hoverSprite == me) {
        hoverSprite = null;
      }

      if (!me.spinning) {
        me.orientation = 'right';
      }
    }

    function playCry() {
      audio = $('audio#cry').get(0);
      audio.src = "/audio/dp_pokecry/" + me.id + ".mp3"
      audio.play();
    }

    function click() {
      me.spinning = true;

      me.oldSpeed = me.speed;
      me.speed *= 2;

      $('audio#cry').bind('ended', function() {
        me.spinning = false;        
        me.speed = me.oldSpeed;
      });
      playCry();
      me.unHover();
    }

    function getSparklePath() {
      return "/images/sparkles/" + me.sizeClass + "S" + me.sparkleState + ".png";
    }

    function getSparkleFrame() {

      var path = getSparklePath();

      if (!sparkleFrames[path]) {
        var sparkle = new Image();
        sparkle.src = getSparklePath();
        sparkleFrames[path] = sparkle;
      }

      return sparkleFrames[path];
    }

    function draw(ctx) {
      ctx.drawImage(getFrame(), me.x, me.y, width(), height());

      if (me.shiny) {
        ctx.drawImage(getSparkleFrame(), me.x, me.y, width(), height());
      }
    }

    me = $.extend(me, {
      load: load,
      update: update,
      draw: draw,
      width: width,
      height: height,
      hover: hover,
      unHover: unHover,
      playCry: playCry,
      click: click,
    });

    return me;
  }

  var updateDelay = 50;

  var sprites = [];
  var frameCount = 0;

  var dexNum = 1;

  var mousein = false;
  var mousex;
  var mousey;

  var newSprite = null;
  
  function draw() {
    frameCount += 1; 

    var canvas = $('canvas').get(0);
    var ctx = canvas.getContext('2d');

    ctx.globalCompositeOperation = 'destination-over';
    ctx.clearRect(0,0,canvas.width,canvas.height);

    // Grab a new PokeSprite if our last one is up and marching.
    if (!newSprite || (!newSprite.loading && sprites.indexOf(newSprite) != -1)) {

      if (settings['order'] == 'national') {
        dexNum += 1;
      } else if (settings['appearByCaptureRate']) {
        var index = Math.floor(Math.random() * sum(data['capRates']));
        var total = 0;
        for (var i = 0; i < data['capRates'].length; ++i) {
          if (index > total && index < total+data['capRates'][i]) {
            dexNum = i+1;
            break;
          } else {
            total += data['capRates'][i];
          }
        }
      } else {
        dexNum = Math.floor(1 + Math.random() * 493);
      }

      if (dexNum > 493) {
        dexNum = 1;
      }

      newSprite = new PokeSprite(dexNum);

      if (data['forms'][dexNum]) {
        newSprite.form = data['forms'][dexNum][Math.floor(Math.random()*(data['forms'][dexNum].length-1))]
      }

      newSprite.load();
    }

    // Add the latest PokeSprite only if it won't squish the next one!
    if (newSprite && !newSprite.loading && (sprites.length == 0 || sprites[sprites.length-1].x > newSprite.width()*1.2)) {
      newSprite.y = Math.floor(Math.random() * (canvas.height - newSprite.height()));
      sprites.push(newSprite);
    }

    updateHoverSprite();

    var toRemove = [];

    for (var i in sprites) {
      var sprite = sprites[i];

      sprite.update();
      sprite.draw(ctx);

      if (sprite.x > canvas.width) {
        toRemove.push(sprite);
      }
    }

    for (var i in toRemove) {
      var sprite = toRemove[i];
      sprites.splice(sprites.indexOf(sprite), 1);
      delete sprite;
    }
  }

  function updateHoverSprite() {
      for (var i in sprites) {
        var sprite = sprites[i];
        if (mousex >= sprite.x && mousex <= sprite.x + sprite.width() &&
            mousey >= sprite.y && mousey <= sprite.y + sprite.height()) {
          sprite.hover();
        } else {
          sprite.unHover();
        }
      }
  }

  $(function() {  
    canvas.width = $(document).width();
    canvas.height = $(document).height()/2;
    
    $(canvas).mousemove(function(ev) {
      mousex = ev.layerX;
      mousey = ev.layerY; 
    });

    $(canvas).mouseout(function(ev) {
      if (hoverSprite) {
        hoverSprite.unHover();
      }
    });

    $(canvas).click(function(ev) {
      if (hoverSprite) {
        hoverSprite.click();
      }
    });

    setInterval(draw, updateDelay);
  });
</script>

<canvas id="canvas">
</canvas>

<audio id="cry">

